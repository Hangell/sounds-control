"use strict";exports.SoundsControl=class{constructor(){this.sources={},this.buffers={},this.isPlaying={},this.isLooping={},this.startTime={},this.pausedTime={},this.currentlyPlaying=null,this.playbackRates={},this.context=new(window.AudioContext||window.webkitAudioContext),this.gainNode=this.context.createGain(),this.gainNode.connect(this.context.destination),this.effectGainNode=this.context.createGain(),this.effectGainNode.connect(this.context.destination)}async loadSound(t,s){if(!this.buffers[s]){const e=await fetch(t),i=await e.arrayBuffer(),a=await this.context.decodeAudioData(i);this.buffers[s]=a}}isSoundLoaded(t){return!!this.buffers[t]}async play(t,s=0){if(!this.isSoundLoaded(t))throw new Error(`Sound ${t} not loaded`);this.stop(t);const e=this.context.createBufferSource();e.buffer=this.buffers[t],e.connect(this.gainNode),e.loop=this.isLooping[t]||!1,e.playbackRate.value=this.playbackRates[t]||1,e.start(0,s),this.sources[t]=e,this.isPlaying[t]=!0,this.startTime[t]=this.context.currentTime-s,this.currentlyPlaying=t,e.onended=()=>{this.isPlaying[t]=!1}}async playEffect(t){if(!this.isSoundLoaded(t))throw new Error(`Sound ${t} not loaded`);const s=this.context.createBufferSource();s.buffer=this.buffers[t],s.connect(this.effectGainNode),s.playbackRate.value=this.playbackRates[t]||1,s.start(0)}stop(t){this.sources[t]&&(this.pausedTime[t]=this.context.currentTime-this.startTime[t],this.sources[t].stop(0),this.sources[t].disconnect(),delete this.sources[t],this.isPlaying[t]=!1,this.currentlyPlaying===t&&(this.currentlyPlaying=null))}loop(t,s=0){this.isLooping[t]=!0,this.play(t,s)}setVolume(t){t<0?t=0:t>1&&(t=1),this.gainNode.gain.setValueAtTime(t,this.context.currentTime)}setEffectVolume(t){t<0?t=0:t>1&&(t=1),this.effectGainNode.gain.setValueAtTime(t,this.context.currentTime)}setPlaybackRate(t,s){this.sources[t]&&(this.sources[t].playbackRate.value=s),this.playbackRates[t]=s}setGlobalPlaybackRate(t){Object.keys(this.sources).forEach((s=>{this.setPlaybackRate(s,t)}))}faster(t,s=1.5){this.setPlaybackRate(t,s)}slow(t,s=.75){this.setPlaybackRate(t,s)}fasterEffect(t,s=1.5){this.setPlaybackRate(t,s)}slowEffect(t,s=.75){this.setPlaybackRate(t,s)}pauseAll(){Object.keys(this.sources).forEach((t=>{this.sources[t]&&(this.pausedTime[t]=this.context.currentTime-this.startTime[t],this.sources[t].stop(0),this.isPlaying[t]=!1)}))}resumeAll(){this.currentlyPlaying&&void 0!==this.pausedTime[this.currentlyPlaying]&&this.play(this.currentlyPlaying,this.pausedTime[this.currentlyPlaying])}};
//# sourceMappingURL=index.cjs.js.map
